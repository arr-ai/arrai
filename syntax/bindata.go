// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib-safe.arraiz (3.518kB)
// syntax/stdlib-unsafe.arraiz (1.342kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibSafeArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x79\x38\xd4\xfb\xbf\xff\x66\x1d\xcc\x41\xc7\x20\x92\xce\xa4\x19\x64\x99\xb2\x0e\x52\x94\x88\xb1\x66\xc9\x92\x65\x98\x19\xc6\x18\x32\x63\x0f\x59\xc6\x41\x18\x15\xb2\x8f\xb2\x54\xc8\x96\xad\x90\xa2\x22\x59\x06\x43\x28\xcb\xb1\xaf\x59\x0e\x83\x24\x73\x9f\xdf\xef\xdc\xf3\xdc\x4e\xf7\xb9\xbf\x7b\xef\xb9\xf7\xfb\xcf\xf7\xf9\xfc\xf1\xde\x5f\xaf\xe7\xf5\x32\x47\xb1\x73\x40\x00\x10\x00\x02\x7e\xfc\xc0\x00\x00\xb8\xf9\x78\xe3\xf0\xee\x8a\x68\x12\x09\x8d\xef\x7f\x67\xd2\xd5\x95\x80\x78\x4f\x47\x54\x5d\x31\x37\xa2\xcb\x77\xc8\x98\xf4\xa3\x7a\xe8\x83\x66\xf2\xa7\xfa\x4d\xba\x38\x2c\xe2\x33\x8d\x34\x79\x5d\xac\xf1\x99\x1a\xc5\x36\xbc\x46\x7b\xcf\xbf\xc8\x16\x69\x14\xef\x21\xad\x96\x45\xaf\xce\xa5\x9d\xb4\x59\x10\x4d\x2f\x9c\xc1\xc0\x75\x65\xc7\xa6\xde\xd4\x58\x69\xc7\xe1\xb3\x22\x00\x00\x60\xb1\xcc\x51\xdc\xa0\x30\x46\x4a\xec\x55\x00\x00\xfc\x00\x00\xf8\xaf\x1b\x82\x01\x00\x40\xf4\xc1\xf8\x7b\x61\x11\xee\x78\x3f\x0f\x7f\x57\x45\x37\x1f\x22\x02\x4d\x22\x29\xa0\xf1\x88\x7f\xb6\x88\x70\xf7\x51\x24\xfa\x60\x42\x53\x3b\x69\xd5\x6a\xe0\xb7\x43\xdd\x96\x95\x5e\xa2\xbb\x27\xba\x88\x7d\xcd\x09\x67\x94\x76\x13\xa2\x8b\xbd\x94\x0c\x69\xcd\xe7\x5b\x8d\xa5\x4f\xe3\xaf\xca\x6f\xed\xf4\xf5\x55\xbd\x85\x6d\x25\xb4\x7b\x5d\xc7\x5f\xd3\xc4\xb5\xc6\x10\xf2\xaf\x35\x32\x0b\xc6\x16\x55\x28\xc6\x4a\x76\x34\x53\x4a\xf5\x10\xce\xa0\x6d\xe4\x7d\x14\x21\x01\xf2\xb4\x14\xc3\x29\x57\x7d\x9e\xf5\xd1\xd0\x24\xb9\x89\xc1\xf8\x92\x7d\xe8\xa1\x4d\xf1\x4b\x51\x83\x8c\x6f\xe1\x7b\x9f\x85\xb7\x3d\xfa\x8f\x28\x6a\x92\x5a\x33\x9f\x96\xba\x44\xc5\x4b\x70\x80\x2c\x74\x64\x53\xd9\x1e\x93\x61\x47\x61\xba\xc3\x25\x36\xf0\xe9\xb3\x64\xcb\x35\x90\xc9\x47\x54\x18\x33\x97\xfe\xfa\x21\x7b\x25\x77\x9d\x98\x42\x0c\xb7\xa9\x1c\xd4\x01\x3e\x7e\xb8\x80\x3a\x6d\xef\x33\x9e\xee\xce\x2b\x1b\xaa\x95\x96\x64\x0e\xe4\xdb\xf8\xdb\xcd\xb9\x10\x63\xb5\x03\xe2\x66\x3f\x55\x1f\x1f\xc3\x0c\x15\xc4\x68\x7a\x64\x6f\xf8\x1a\x4c\x51\x1a\x76\xbc\x5b\x73\x43\x61\xbc\x76\x3a\xb5\xef\xeb\x55\xfd\x40\x25\x57\x7f\x5a\xa5\x0a\x40\x0d\xf2\x75\xee\xf8\xe4\xa9\x06\x74\xcc\x44\x42\xe7\x5f\xcc\x1d\x1f\x7e\xeb\xd2\x93\x61\x73\xb9\x2a\xec\xb2\xa9\x19\x3c\xa8\x69\x21\xbe\x5d\x4f\xbf\xfd\x91\x70\xc7\xad\x63\xfe\x7d\xb2\x26\x04\x4b\x51\x7f\xa3\x9d\xee\xb2\x51\xb9\xee\xf9\x49\x67\xe5\xa8\x5a\x6e\xe5\x2d\xbe\xee\x8b\x37\x02\xe7\x2c\x2f\xf7\x8c\xab\xe3\x2a\x74\x50\x89\x10\xd7\x99\xdc\xa1\x39\xaf\x0e\xe6\x5e\x4f\xc5\x6d\xc7\x48\x43\xf8\xc1\x26\x54\xcf\x78\xda\x9a\x21\x68\x13\x4d\x89\x5f\xfd\x04\xfa\xfa\xaa\xa0\x00\x4b\x45\xfa\x1e\xe7\xb2\xa7\x45\xaa\x72\x27\x9f\xcf\xdb\x6b\xce\x01\xa5\x88\xc5\xc7\xae\x0e\x7d\x0e\x2e\x66\xb9\x2f\xf1\x99\x1e\xa9\x0f\x86\x95\x0a\xdc\x13\x79\xba\x77\x6b\x34\x68\x47\x03\x26\x11\xf1\xe9\x02\x75\xba\xfb\x7e\xa0\xc0\x3e\x66\x80\xe1\xb7\x1e\x22\x6e\x7b\x3f\x72\x22\xa8\x17\x25\x8e\xae\x37\x2a\x03\x6e\xc7\x44\xc1\x11\x37\x64\x6e\x28\xf8\x33\x4a\xa7\x5c\xb6\xad\xa5\xc6\xa7\x13\x22\x20\xd6\x50\x8a\xcc\x03\xc1\xe7\x95\x65\x83\xe6\xf8\x4f\x03\xed\x8e\xa1\xc2\x97\x83\x50\x0e\x70\xa6\x3d\x4f\xb4\xc1\x36\x1b\x18\x79\xec\x83\x07\xf1\x84\xb8\x20\x56\x76\xa9\xa9\x34\xa4\x12\xeb\x7e\xc9\x79\xa7\x1d\x7e\xbe\xd0\x43\x8d\xbe\x3c\xf2\x81\x69\xf0\x6d\xe4\x91\xc3\xca\xa6\x99\x15\xb1\x2b\x54\x32\x23\x7b\xd7\xd1\xf9\xec\x27\x57\xf9\x71\xc8\xad\x15\xfb\xd0\xc6\x94\xfc\x7b\x0a\x35\xc0\x73\xcf\xd2\x2b\x69\x0d\xa7\xf4\xc6\x3e\x8f\x7e\xf3\xdd\x93\xfe\x13\x96\x0f\xf3\x9f\xd5\xe8\xb1\x01\x80\x3d\xe7\xbf\x82\xa5\xfa\x7f\x0f\x4b\x72\xb0\xb7\x1f\x3a\x08\x41\xf6\xc3\x78\xe1\x5d\x11\x38\x2f\xf4\xbf\x53\xea\x89\x2d\x2a\x39\xfb\x9d\xd0\xcb\x79\xcb\x01\xe7\x68\xae\xdd\xa3\x29\x37\xe8\x1f\x13\x6b\x46\x24\x52\x3a\x3d\x11\x6e\x15\xf8\xec\xba\x24\x4a\x8b\xe7\x2b\x43\xbd\xdd\xd5\xd2\x25\x6e\x01\x46\x84\x41\x96\xe6\xf0\xd9\x92\xd2\x92\xe5\x8d\x52\x4f\xb5\xe0\xc3\xb0\x8d\x03\x21\x40\xa7\x95\xf7\x3a\xc8\x5d\x52\xb0\x2d\xb8\x6d\x83\xa5\x2f\x24\x10\x3a\x11\x88\xe6\xbc\xcb\x2c\x9a\x4c\xf2\x08\xc7\x69\x3c\x89\x50\x66\xdd\x76\x2c\xf7\x6d\xcd\x59\x9f\x98\x55\x02\x8d\xdd\x2b\xfe\x6d\x63\x36\x01\x97\x2a\xb7\xdf\x34\xaa\x55\x57\x96\x41\x8b\xa8\x16\xfa\xca\x63\x40\x73\x8c\x20\x99\xba\xb1\xda\xcf\x69\xab\xb1\x4d\xed\x3b\x04\x8f\x28\x87\x57\xb8\x57\x83\x73\x22\xbc\xf2\x39\x0f\xf6\xb2\x17\x58\xde\xeb\x47\x59\xa2\xe5\x42\xb7\xeb\x5f\x0e\x6f\x13\x9f\x0f\x73\x05\x1d\xb7\x7d\xb0\xec\xec\xe1\x8b\x0c\xec\xda\xf3\x17\x16\xb1\x0e\x70\x5a\x47\x6a\x8f\x48\x0e\x7f\x95\x47\xad\x9f\x17\xde\x5b\xb1\x27\x69\x4d\x89\x2e\x76\xdd\x95\x8b\xec\x86\xa2\x92\x37\x8a\x83\x4b\x78\x8a\xde\x5f\xad\xec\x17\x15\x4b\x3e\x32\xc1\x62\x63\x09\x7f\x20\x0c\x23\x2b\x38\xa8\x3c\xda\x61\x05\xa2\x73\x2d\xcb\x49\x70\x58\x8a\xd9\x01\x64\x7f\x55\x47\xa6\x1f\x8a\x2a\xe0\x17\xb2\xd2\x57\x3c\x19\xfb\x5b\xdd\x59\xd0\xe5\x4c\x86\x90\x54\x5d\xd2\x90\x4a\x3c\xbe\xbc\x5c\x2a\xa0\x10\x7b\x25\x4e\x2b\xf1\xd4\xa1\xd8\x1a\x91\x0e\xac\xe4\x3b\x98\xa4\x8c\x6f\x48\xda\x72\x92\xa7\x7e\x9b\x96\x1d\xa9\xcc\x8a\xff\xb1\xd9\xc7\x93\x8a\xb5\x62\x2e\x9f\xa4\x2e\x2c\xb7\x30\xd2\x5b\x84\xe4\x54\x14\xbf\x85\x2b\x4c\xc9\x77\x77\x3c\xae\xb2\x29\x6a\xad\x76\x4a\xee\xe8\xad\xb9\x66\x9f\x56\xa1\x6e\xed\x90\x86\xd8\x66\xa7\xd3\x5d\x62\x24\xe5\x99\xd1\x9a\x6f\x02\x9f\xb9\xed\x4e\x18\xc1\x7e\x56\x1a\x71\x79\xed\x7a\x68\xca\x84\x98\xc4\x6d\x9a\x52\x21\xc1\xb0\x23\xc4\x98\x4e\x2b\x94\xf6\x83\x6b\xb5\x88\x3b\xbd\x61\xf0\xa7\xa7\x9c\x39\xb0\x59\x5a\x27\x31\x42\x02\x76\xad\x6a\xd7\xaf\xbe\x27\xb7\x75\x17\x45\x62\xab\x52\x84\x0f\x2f\x3e\x7d\x7c\x6a\x62\x87\x90\xc9\xab\xc5\xc6\xe6\x25\x21\x67\xe5\x83\xc0\x3a\xbd\xa2\x1d\x8a\x91\x39\xe7\x22\x23\xcb\x9a\xd5\xcd\x12\x36\xf9\x6d\xa9\xb7\xcc\x99\xcb\x9e\x2a\xfb\xc4\x85\x5c\xc0\xe3\xd5\x93\xa8\xdf\xc6\x46\x94\xd7\xe5\x7f\x5c\xf9\x4b\x20\x11\xb6\x3a\x9a\x5c\x63\xb8\x9c\x2a\xcb\x60\x10\xb6\xd4\xc5\x53\xb6\x6f\xb7\xf4\xc5\xc4\x15\x2d\x51\xa5\x6b\x80\xe9\xdf\xb3\x5e\xf1\x7a\xab\xdc\x91\x5d\x8c\x73\x56\xff\xc5\x20\x6b\xc6\xcb\x23\x13\x8e\x1e\xf4\xc3\xe5\x2f\x7c\x90\x22\x69\xd5\x59\x77\x74\xd5\xcf\x1e\xd8\xf2\xa7\x2b\xc9\x4e\x11\x5a\x39\x6c\xd0\xdd\x0e\xc2\xe5\x7a\x54\x95\x56\xad\xd1\x6b\xc4\x58\xa1\xd3\x51\x35\x52\xe6\xb2\x03\x82\x7c\x6d\xcf\xbb\xf1\x84\x39\x83\x62\x2e\x0b\x66\xe7\xa3\x96\x6a\x69\x24\x43\xc5\x28\x63\xe9\xb0\xd0\xf5\x89\x28\x12\xa2\xb9\x39\x71\xc2\x36\x43\x35\x47\xed\x48\x71\xe4\xb3\xe4\x3a\xc9\x1c\xfc\xc1\xa5\xf4\xf0\x16\x94\xda\x14\xf2\x91\x34\x6e\xb7\x49\x4e\xff\xe4\xeb\x38\x89\xf8\xc9\x8b\x21\x15\x39\xb9\x86\x20\x9d\x14\x9d\x05\xd5\x24\x0e\xdf\x90\x02\x43\x09\x68\xcd\x83\x79\x4f\x4b\x52\x86\xeb\x40\x29\xb6\x3a\x4f\xab\xc5\xe2\xdd\x3e\xf7\x1d\x28\x91\x6c\x77\x76\xa8\x36\xb7\x08\xfc\x54\xca\x36\x2d\xf1\x06\xa3\x91\xe0\xb8\xc0\xf6\xf6\x35\x3a\x85\x66\x7c\xa2\xa7\x3c\x51\x44\x3e\xe4\x6c\x72\x43\x60\x02\x73\x1a\x5f\xa4\x5a\xcb\x53\x94\x97\xc8\xfd\x3e\x38\xf6\x65\x95\x38\xba\xc8\xf8\xcc\x3a\xb2\xc4\xf3\x28\xe8\xc2\xb2\x70\x84\xff\xf6\x49\xb1\x55\x35\xd9\xca\x07\x5a\xbc\xb3\xfe\x13\xf4\x8b\xcf\x7c\x70\x65\xf4\x3c\x39\x16\xd9\xee\x8d\xe1\x67\xb2\x48\x1a\xf7\x1c\xd8\x58\xeb\xa1\x93\x9b\x93\xf5\x44\xa6\xe5\x60\xb9\xfa\x91\xe1\x3d\x6f\xdf\xb5\xba\xaf\x1c\x37\x6f\xb2\x7e\xcf\x8d\x8b\x17\x54\x94\x6f\x87\x6b\x9e\x36\xf7\xbb\xe4\x65\x98\x9a\xf7\x7b\xe6\x33\xa9\x6c\x49\xe5\xc4\xaa\xac\x48\xbc\xaa\x6d\x02\x74\xa8\x2f\x0a\xae\xc9\xe5\xf7\x70\x93\x2f\xc1\x65\x30\x93\xf1\x89\x39\xed\xc8\xbe\xa7\x01\x7d\xf1\x48\x3c\xf9\xee\x22\x97\x9e\x63\x77\xc2\xf3\xec\xec\xc6\x91\xc9\xfb\xbc\xea\xbf\xf4\x24\xaa\x26\x0d\x36\xc4\x1b\x21\x2d\xd9\x36\xe0\x82\x96\x15\xe5\xf1\x73\x69\xe1\xf7\x35\x67\xf5\x02\xc5\x6f\x46\xa7\x0d\x2c\x19\xa8\x5e\xb9\xe1\x3c\x99\x1a\xca\x68\x22\x74\x89\xf5\xf0\x2b\x55\x37\x9f\x48\x2c\x59\xf9\xd9\x8d\x1e\x34\x0e\xba\xb7\x31\x13\x7c\x91\xc1\xe9\x09\x51\x31\xad\xdb\xb4\x73\xcb\xd8\x74\x78\xb2\x08\xcd\x58\x7f\x6f\x3c\x43\x8b\xd0\xb7\x50\x14\x89\xd4\x7b\x76\x22\x7a\xaa\x2b\x42\x92\x7f\xb6\xc8\x98\x23\xe4\x56\x26\xdb\xef\x60\x6a\x2a\xfd\xe3\x8e\x94\x62\xcf\x02\xed\x26\x45\x45\x03\x72\x6f\xae\xa1\xc1\x39\xc4\x12\x85\x79\x51\x5b\xc5\xc8\x18\x2c\xa6\x46\x34\x11\x7d\x2f\xdc\x14\x22\xd4\xb9\x7a\x41\xd2\x7f\xd5\x58\xa7\x5d\x37\x72\x7c\x82\xed\xf7\x13\xb4\x70\x45\x67\x1b\x5e\xc9\xf9\x62\xfb\x18\x6f\x9f\x39\x1c\xeb\x41\xde\x7c\x24\x10\xec\x0d\x25\x86\x68\x64\x08\x38\x4d\xe4\x52\x33\xf4\x70\x38\x24\xd4\xe4\xd8\x93\x47\x0c\xc3\x94\x9a\x94\xb6\x0e\xf6\x00\xcf\xbb\x54\xd1\xf8\x4e\x3b\xa7\xae\x93\xab\xda\xb5\x8d\x6f\xde\xee\x34\x42\xf2\xc7\xf0\xf4\x40\xfc\xf8\xf1\x2c\xcd\x58\xbe\x45\x68\xe6\x17\x8b\x36\xd2\x19\xf7\x9c\xc5\x9f\xe8\x62\x4b\x20\x17\x07\x13\xcd\xae\xe4\x9e\x2c\x38\x0e\x67\xb2\x27\xc5\x1d\x5c\x3f\xcf\xed\x94\xb7\x6c\xb2\x53\x78\x7e\x41\xe6\x78\xe0\xe6\x67\xb4\xd8\xe5\x87\x95\x67\x9e\x14\x3a\xa8\x47\x6d\x96\xf7\x6e\xf1\x7f\x30\x05\xc3\x5c\xde\x28\x05\x40\x0a\x1d\x2e\x8d\x62\x36\xc2\x31\xbd\xf7\x2b\xec\x97\xf6\x86\xb7\x82\x5f\xdd\x1a\x13\x84\xaa\xe4\xa0\x0b\x2c\xd8\x7f\xa9\x93\xe0\x30\xb0\x7a\x99\xcb\xf7\x7a\x97\x3b\xae\x83\xa6\xf5\x61\x4b\xf2\x4b\xd0\x80\xb1\x07\x72\xbf\xe6\xab\x6e\xa3\xf6\x8b\x3b\xf5\x65\x8f\x04\xaa\xad\x3f\x8b\x7f\xcc\xd0\x40\xc7\xa7\xca\x85\xba\xd4\x39\xf3\x58\x87\xfe\xfc\xe5\x66\xf2\xaa\x95\xca\xe5\xbe\xc3\x30\xe9\x87\x4d\x07\x14\x35\x09\x79\xd5\x49\xae\x11\x3a\x12\x31\xb5\xb5\x65\xfd\xc4\x81\x29\x5c\xfe\x21\x82\xbc\x3f\x1c\xe2\x8e\x4c\x68\x49\x56\x9e\x06\x0f\xe8\xbe\xf1\x11\xa0\xac\xef\x83\x0f\x4a\x91\x68\xa6\x55\x43\xa5\x93\xfa\xf1\x5a\xae\xac\x55\xe9\xfd\xf1\x32\xa9\x17\x32\xc1\xa3\x66\x2c\xce\x3f\x75\xe0\x54\x58\xe7\x4e\x01\x27\x00\x3c\x16\xf9\x57\x3a\x70\xee\x7f\xab\x03\x7f\xfc\x14\xc8\x68\x1c\xf6\x0f\x39\xa0\xdc\x36\xa3\x67\x9f\x06\xb7\xad\x85\xde\x32\x08\x41\xdc\xb7\x59\xcc\xc5\x0f\x96\x37\xae\xbd\x7b\x2b\xc8\xde\xd7\xcf\x01\x7b\x78\xb3\xc6\x3b\x2f\x8c\xd7\x0f\x62\x8f\xaf\x10\xb8\x33\x3d\xff\xe5\x6d\xc0\xb9\xf5\x02\xf5\xc3\x55\x3c\x38\x41\x70\x4b\x5e\xd2\x1c\xa8\x35\xc6\xdb\x23\x4c\x67\x4b\x5a\x5f\xab\x41\x3f\x31\xf0\x70\x9b\x6e\x88\x3e\x84\x94\x15\xf5\xab\xaa\xff\xfd\xeb\xd1\x41\x03\x89\xa8\xd3\x27\x56\xee\x26\x5c\x30\xc7\x40\x9a\xf9\x28\xe1\xa4\x51\x97\x91\x76\xb6\xf2\xdb\x3d\x0e\xa4\x63\x32\xb5\xe9\xbe\x95\x60\x92\x78\x24\x16\xac\x18\x95\x93\x4e\x7b\x7d\xf1\xf9\x91\x45\x5d\xfb\x6c\x15\x91\x91\x41\xca\x9a\x32\xc6\x1a\x42\x34\xc9\x3d\x14\x81\xd5\x3d\xe8\x46\x4e\xfe\xf6\xee\xde\x6e\xfa\xe7\x07\xa9\xa7\xd6\x85\xab\x77\x3a\x31\x34\x32\x73\xbe\x19\x08\x5c\xa1\xbe\x93\x3e\x73\x89\x50\x2c\xe7\x8b\xdc\xbf\x12\x9b\x7a\xd0\xe3\x9e\x3f\x8c\xe0\x0f\x48\x1a\x6a\xf3\x6f\x74\x7b\x3e\x75\xe5\x9a\xd9\x76\x6d\xea\x05\xf2\xb4\x6a\xec\xcf\xd6\xd3\x8e\x04\xcd\x19\x72\x91\x9e\xf5\x04\x25\x3d\x72\x90\x89\x19\x94\x9f\xad\x26\x27\x63\x64\x6c\xba\xeb\x7d\x0e\xd6\x62\x9a\x82\x7a\xd7\xd6\x6b\x74\xa3\x92\x8e\xea\x8f\xf4\x57\xdf\x33\x33\xaa\x82\xe6\xd5\x33\xdd\x73\x3a\x9a\x6f\xea\x95\x50\x4f\x86\xbf\x20\x97\xa4\x3d\xde\xd5\xa4\xb8\xb7\x5b\xe5\x50\xb1\x93\x85\x2f\x15\xf7\x79\xb2\xd4\x72\x2b\xe7\x23\x46\xfc\xf6\x7f\xfa\xf3\x6c\xf5\x3b\x17\x2c\x50\x87\x00\x80\x8f\xfd\xff\x55\xbe\xfd\xfd\xf0\x5e\x7f\xdc\xcb\x8b\xda\x72\x8b\x72\x5a\x50\x6f\xed\x9b\x30\xe7\x0d\x8b\xdb\x2b\x8e\x23\x08\x3b\xed\x9a\x5c\x0e\xb6\x3e\x1d\x69\x3b\x0a\xf6\x20\x2c\x4e\x49\x19\x6c\xec\xd8\x10\xcc\xe4\x67\xc6\x28\x7c\xd3\xe0\xab\xc0\x47\x17\xbe\xf0\xb0\x7d\x49\xe0\xe9\xab\x3c\xc5\x9d\x4a\xc9\x3a\x16\x7a\x65\xc6\xd5\xcd\xb6\x5b\xba\x14\x97\x7e\x5c\xfb\xd2\xd5\xfb\x3d\x36\xbe\xbb\x2d\x2b\x3c\x80\x22\xbc\xf7\x57\x5b\x0e\xe5\x52\x9a\x49\x42\xe1\x58\x94\xf5\x06\x4b\x4f\xe1\x65\x27\x48\x44\x6c\x7c\xf2\xcc\xab\x23\x96\xc8\x37\x58\x4a\x40\x33\x81\x97\x1a\xae\xe3\xf6\xad\xb3\x39\x77\x42\x6f\xde\x22\x2b\xae\x61\xe3\xe3\x20\x43\xfb\xcf\xe9\x63\xe1\x9a\xb4\x4c\x00\x00\x76\xfe\xe9\xa9\x0f\xb1\x41\x80\xff\x98\xff\x7b\xbf\x0d\xfe\x4f\x1b\xf9\xde\xf4\xff\x18\xf9\xbd\x25\x82\xfd\x25\xea\xce\xff\xd4\x9d\xff\x98\xf2\x7b\x76\xa9\xff\x25\xa5\x0c\xfb\xdf\x76\x56\x3f\x16\xf9\x1e\x0b\xe7\xfe\x52\xe4\x34\xcf\xff\x95\xb6\x3f\xd6\xfa\x7e\xf3\x7f\x1d\x68\x9e\xf7\x6f\x63\xcd\x1c\xc5\xc9\xf5\x8f\x14\x9c\x00\x27\xf0\xfa\x10\x00\xcc\xf2\xfd\xe3\xf5\x6f\x01\x00\x00\xff\xff\xb2\x6a\xd9\x40\xbe\x0d\x00\x00")

func syntaxStdlibSafeArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibSafeArraiz,
		"syntax/stdlib-safe.arraiz",
	)
}

func syntaxStdlibSafeArraiz() (*asset, error) {
	bytes, err := syntaxStdlibSafeArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib-safe.arraiz", size: 3518, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd7, 0x91, 0x7f, 0xd2, 0x12, 0x16, 0x48, 0xab, 0xa, 0xca, 0xdc, 0xf0, 0xfc, 0xc3, 0xa4, 0x5c, 0xb, 0xf4, 0xb, 0x4c, 0xbb, 0x52, 0xc5, 0xeb, 0xc4, 0xab, 0x61, 0xd4, 0x4f, 0x95, 0x97, 0x15}}
	return a, nil
}

var _syntaxStdlibUnsafeArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xf0\x66\x66\x11\x61\xe0\x60\xe0\x60\x40\x07\x3c\x0c\x0c\x0c\xc9\xf9\x79\x69\x99\xe9\x7a\x89\x45\x45\x89\x99\x97\x4e\xf8\x9e\x39\xd3\xad\x7f\xea\xbc\xfe\xc6\xa0\x00\xaf\xf3\x3a\x27\x35\x7c\x2f\x79\x9f\x3b\x7f\xd5\x5f\x47\xeb\x92\xef\x19\x96\xc0\xce\x99\x5e\x56\x5c\x09\xa1\x99\x33\x2d\x57\x86\x71\x79\xfd\xda\xf9\x53\x73\xa9\xe5\xca\x5f\x16\x21\xaf\xc5\xc3\x9f\x4d\x55\x09\x7b\x21\x3e\x7d\xc9\x93\x14\x35\x47\xcd\xbb\x97\xf6\x3c\x3a\xb2\x25\xc4\xb6\xa3\x72\x56\x03\x03\x03\xc3\xff\xff\x01\xde\xec\x1c\xfa\x49\xa6\xa6\x91\x0c\x0c\x0c\x65\x0c\x0c\x0c\xb8\x9d\xa4\xca\xc0\xc0\x90\x9b\x9f\x52\x9a\x93\xaa\x9f\x9e\x59\x92\x51\x9a\xa4\x97\x9c\x9f\xab\x9f\x58\x54\xa4\x9b\x98\xa9\x0f\x76\xa4\x7e\x7a\xbe\x5e\x6e\x7e\x4a\xcd\x94\xd3\xf3\x36\x9b\xf1\x1c\xbd\x7e\x36\x78\x43\x8e\xf8\x0f\xa5\x33\xb9\x17\xf7\x75\x1b\x1a\xfd\xe8\x6e\x5e\x99\x63\xe4\x39\x6f\x9f\xfd\x21\x1f\x75\x83\xcc\x70\x9d\x2f\xdf\x2f\x5e\xdc\x78\x54\xf5\x4b\xf7\xf1\x9c\x82\xcc\x18\xab\xb4\x43\xad\xd9\x8b\x62\x76\x7f\x5d\x7c\xf7\xa5\x49\x8b\x8f\x51\xe4\x3c\xbf\x96\xcd\xd7\xd3\xdc\x8f\xdd\x3c\xd5\x94\xdd\x2d\xb2\x69\x75\x0a\xab\xf6\x66\xfb\xff\xb7\x3c\x7d\xfb\xf7\x5c\xbe\xfc\x73\x36\xe3\xb2\xb0\x95\xfb\xc5\xdd\x67\xfc\xad\xfb\xf5\x56\xf4\x5b\xc6\x25\x09\x3d\xab\xa2\x43\x33\x37\xad\x4e\x68\xea\x94\x61\xe1\x08\x74\xd0\x9c\xc2\xb4\xa2\x58\x55\x5a\xd5\xf1\xc6\xaa\x30\xb5\xc7\x36\xc5\xc1\xef\x39\x7c\x6f\x79\xd7\x7e\x9d\x7b\xfe\xf0\x32\xe6\x0d\xec\xdb\x24\x75\x5b\xd9\xfd\xb4\x15\xa3\xd5\xee\x09\x2e\xee\x7b\x1c\x95\x7f\x6f\x7a\x3a\x97\x66\x8d\xf5\xd4\xde\x00\x86\x45\x61\xa5\x91\xcf\x12\x72\xdb\x6d\xcb\x3a\x9e\xde\xde\x2c\x7f\x37\xe5\xfa\xe2\x56\xab\x8c\xd9\x1f\x0b\xdd\x1f\xb5\xec\xfa\x9e\x77\x68\x6e\x8d\x2a\x57\xa4\xc3\xd6\x53\xdb\x4d\x4b\x38\x56\x85\xf3\xbe\xeb\xe3\x57\x74\x5f\xe4\x30\x31\x7f\xbe\x69\xd9\xc9\x27\x8d\x8a\xcf\xf7\x3e\x93\xbf\x71\x34\xe1\xdc\x8c\x30\x8f\x8d\xb5\x1e\x7e\xfe\x6a\x15\x7b\x5e\x74\x1e\x77\x71\x3b\xbe\x5c\xf4\x64\x97\x6c\xe9\x45\x4d\xdf\xec\x60\xf1\x52\xaf\xef\x67\xd7\xde\xd1\x3e\xfb\xfc\x61\xbc\x71\xd3\x56\x76\xe3\x2f\xdc\x67\x9d\xab\xcb\x9f\x05\x7b\x9c\xbb\x67\x9e\xb6\xde\xc1\xbb\x47\x24\xe9\xc9\xdc\xeb\xcf\x72\x4e\x7e\xfd\x75\x6e\xfd\x84\xd8\x46\x4f\xb5\x7f\x9f\x15\x5d\x7c\x1e\x87\x5e\x16\x08\x6b\x6e\xe9\x7c\x77\x9b\xe3\xf7\x81\xc5\x8b\x53\xfb\x2c\x0a\xe5\xd9\xa2\xe6\x35\x9a\xb2\xf7\xdb\xcf\xff\xb5\x6f\x0e\xc7\x64\xc9\xce\xf6\x77\xd7\xdf\x56\xae\xfc\x9f\xfe\x8a\xdb\x4f\x62\x7b\xa5\xea\x6a\xfe\x69\x62\x9b\x7e\x75\xdd\xa9\xf8\x6e\xa9\x2a\xd3\x70\xdb\xa9\xef\xf1\xd9\x05\xe5\xfc\x7f\x52\xae\x5c\x2e\xf9\x50\x25\x15\xb1\xa0\xf1\x7e\xc5\x05\x6f\xa9\xc4\xed\x5e\x6b\x19\x26\xb4\x36\xa9\xe9\x57\x6b\x54\xeb\x96\x5e\x5e\xfd\x28\xe1\x5b\xa8\xf2\xbd\xc7\xdd\x0d\x22\xa1\x8a\x2d\x1a\x0b\x05\x76\x6e\x58\x7b\x35\x20\xf3\xf6\x95\xe3\xb1\x35\xa2\x1e\x15\xde\xd1\x6a\x5f\xa3\x38\x9b\xdd\xbf\x31\xf1\x58\xc8\x5e\xcb\xc8\x55\x92\x12\x48\xd5\x7c\xb5\x67\x75\xd5\x86\xd4\x74\xd7\xf8\xef\xc7\xd5\xec\x97\x64\x98\x9d\x7f\x7d\xf3\xda\x57\xf7\xbf\x37\x97\x47\xbf\xf9\xec\x1f\x92\x7b\xa6\x46\x6e\xc6\xec\x1f\xb1\xf1\x36\xb7\x93\x74\xee\x89\x74\xbd\x89\xaa\xd9\x3d\x79\xd1\x34\xdd\x2d\x0c\x3b\xb3\x56\x07\x4d\xdd\xa5\xe5\x72\xf7\xed\x9d\xbf\x85\xbf\xd4\x61\xc9\x72\xd9\xa2\x1d\x5b\x5c\x98\x18\x18\xa2\x58\xf1\x25\x4b\x07\xc2\xc9\xb2\xb8\x32\xaf\x24\xb1\x42\xbf\xb8\x24\x25\x27\x33\x09\x4a\xe9\x96\xe6\x15\x27\xa6\xa5\x42\x72\x57\x4a\x9f\x63\x57\x4b\x00\x8f\xcb\xf7\x79\x8b\x0e\xec\xfd\x3e\xe3\xaf\x4e\xba\xf0\xdf\x8b\xf2\xcf\xca\x95\x3c\x73\x3e\x7e\xeb\x55\xe8\xf5\x7d\xcf\xb5\x4a\xee\x6b\xd5\x9f\x30\xce\x23\x4f\x36\xa9\x85\x6d\x5f\x2e\xc2\x27\x50\x66\x65\x30\x5b\xf9\xcd\xc1\x19\xe6\x73\x83\x7c\x98\x17\x9d\x38\xd5\xa1\xa2\xfb\x84\xd5\xd7\x4d\xdd\x7e\x42\xdb\xc4\x8d\xbb\x53\x36\xcd\xd3\x2e\x92\xf7\x60\xfb\xa3\x32\xe9\x9f\xa5\xdd\x86\x75\xf5\xcd\xe6\x29\x1b\xdd\x76\x35\x9c\xfb\x7d\xe7\xda\x31\x05\xdd\x82\x73\x67\x4d\x1d\xb2\x22\x6f\xae\x4f\x9b\xbe\x66\x41\xd0\x93\x2b\x8b\xca\x8c\xff\x94\xbd\xf8\xa7\xe4\x3d\x79\x23\x73\x83\xf6\x3e\x26\x58\x10\x4c\x9e\xbb\x62\xe3\x54\x06\x06\x86\x1f\xe0\x9c\xc9\xc8\x24\xc2\x80\x08\x04\xe4\x5c\xcb\x83\x11\x2c\xc8\x85\x07\xba\x4e\xe4\x80\x55\x45\xd1\x35\x99\xd8\x3c\x8e\x6e\x24\xb2\x43\x1d\x50\x8c\xd4\x62\xa6\x3c\x7e\x02\xbc\x59\xd9\x40\x66\x31\x33\x30\x33\xfc\x66\x60\x60\xd0\x65\x01\xf1\x00\x01\x00\x00\xff\xff\x63\x4b\xd5\x8d\x3e\x05\x00\x00")

func syntaxStdlibUnsafeArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibUnsafeArraiz,
		"syntax/stdlib-unsafe.arraiz",
	)
}

func syntaxStdlibUnsafeArraiz() (*asset, error) {
	bytes, err := syntaxStdlibUnsafeArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib-unsafe.arraiz", size: 1342, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x77, 0xb5, 0x80, 0x14, 0x75, 0x11, 0xd7, 0x20, 0xaa, 0xfe, 0x5f, 0xef, 0xda, 0x4b, 0x17, 0x4e, 0x42, 0x1, 0xfe, 0x64, 0xe, 0x8a, 0xfa, 0x26, 0x94, 0x1f, 0xc7, 0xa5, 0x6e, 0x12, 0x7a, 0xf7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib-safe.arraiz":    syntaxStdlibSafeArraiz,
	"syntax/stdlib-unsafe.arraiz":  syntaxStdlibUnsafeArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib-safe.arraiz":    {syntaxStdlibSafeArraiz, map[string]*bintree{}},
		"stdlib-unsafe.arraiz":  {syntaxStdlibUnsafeArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
