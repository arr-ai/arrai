expr   -> C* amp="&"* @ C* arrow=(
              nest |
              unnest |
              ARROW @ |
              FILTER cond=(controlVar=@ "{" (condition=pattern ":" value=@):SEQ_COMMENT,? "}") |
              binding="->" C* "\\" C* pattern C* %%bind C* @ |
              binding="->" C* %%bind @
          )* C*
        > C* @:binop=">>>" C*
        > C* unop=/{:>|=>|>>}* @ C*
        > C* @:binop=("without" | "with") C*
        > C* @:binop="||" C*
        > C* @:binop="&&" C*
        > C* @:compare=/{!?(?:<:|=|<=?|>=?|\((?:<=?|>=?|<>=?)\))} C*
        > C* @ if=("if" t=expr ("else" f=expr)?)* C*
        > C* @:binop=/{\+\+|[+|]|-%?} C*
        > C* @:binop=/{&~|&|~~?|[-<][-&][->]} C*
        > C* @:binop=/{//|[*/%]|\\} C*
        > C* @:rbinop="^" C*
        > C* unop=/{[-+!*^]}* @ C*
        > C* @ postfix=/{count|single}? C* touch? C*
        > C* (get | @) tail_op=(
            safe_tail=(first_safe=(tail "?") ops=(safe=(tail "?") | tail)* ":" fall=@)
            | tail
          )* C*
        > %!patternterms(expr)
        | C* cond=("cond" "{" pairs=(key=@ ":" value=@):SEQ_COMMENT,? "}") C*
        | C* cond=("cond" controlVar=expr "{" (condition=pattern ":" value=@):SEQ_COMMENT,? "}") C*
        | C* "{:" C* embed=(macro=@ rule? ":" subgrammar=%%ast) ":}" C*
        | C* op="\\\\" @ C*
        | C* fn="\\" pattern @ C*
        | C* import="//" pkg=( "{" dot="."? PKGPATH "}" | std=IDENT?)
        | C* odelim="(" @ cdelim=")" C*
        | C* let=("let" C* rec="rec"? pattern C* "=" C* @ %%bind C* ";" C* @) C*
        | C* xstr C*
        | C* IDENT C*
        | C* STR C*
        | C* NUM C*
        | C* CHAR C*;
rule   -> C* "[" C* name C* "]" C*;
nest   -> C* "nest" names IDENT C*;
unnest -> C* "unnest" IDENT C*;
touch  -> C* ("->*" ("&"? IDENT | STR))+ "(" expr:"," ","? ")" C*;
get    -> C* dot="." ("&"? IDENT | STR) C*;
names  -> C* "|" C* IDENT:"," C* "|" C*;
name   -> C* IDENT C* | C* STR C*;
xstr   -> C* quote=/{\$"\s*} part=( sexpr | fragment=/{(?: \\. | \$[^{"] | [^\\"$] )+} )* '"' C*
        | C* quote=/{\$'\s*} part=( sexpr | fragment=/{(?: \\. | \$[^{'] | [^\\'$] )+} )* "'" C*
        | C* quote=/{\$‵\s*} part=( sexpr | fragment=/{(?: ‵‵  | \$[^{‵] | [^‵  $] )+} )* "‵" C*;
sexpr  -> "${"
          C* expr C*
          control=/{ (?: : [-+#*\.\_0-9a-z]* (?: : (?: \\. | [^\\:}] )* ){0,2} )? }
          close=/{\}\s*};
tail   -> get
          | call=("("
                arg=(
                    expr (":" end=expr? (":" step=expr)?)?
                    |     ":" end=expr  (":" step=expr)?
                ):SEQ_COMMENT,
            ")");
pattern -> extra 
        | %!patternterms(pattern|expr)
        | IDENT
        | NUM 
        | C* "(" exprpattern=expr:SEQ_COMMENT,? ")" C* 
        | C* exprpattern=STR C*;
extra -> ("..." ident=IDENT?);
fallback -> ("?"? ":" fall=expr);

ARROW  -> /{:>|=>|>>|orderby|order|rank|where|sum|max|mean|median|min};
FILTER -> /{filter};
IDENT  -> /{ \. | [$@A-Za-z_][0-9$@A-Za-z_]* };
PKGPATH -> /{ (?: \\ | [^\\}] )* };
STR    -> /{ " (?: \\. | [^\\"] )* "
           | ' (?: \\. | [^\\'] )* '
           | ‵ (?: ‵‵  | [^‵  ] )* ‵
           };
NUM    -> /{ (?: \d+(?:\.\d*)? | \.\d+ ) (?: [Ee][-+]?\d+ )? };
CHAR   -> /{%(?:\\.|.)};
C      -> /{ # .* $ };
SEQ_COMMENT -> "," C*;

.wrapRE -> /{\s*()\s*};

.macro patternterms(top) {
    C* odelim="{" C* rel=(names tuple=("(" v=top:SEQ_COMMENT, ")"):SEQ_COMMENT,?) cdelim="}" C*
  | C* odelim="{" C* set=(elt=top:SEQ_COMMENT,?) cdelim="}" C*
  | C* odelim="{" C* dict=(pairs=((extra|key=(expr tail=("?")?) ":" value=(top fall=(":" expr)?))):SEQ_COMMENT,?) cdelim="}" C*
  | C* odelim="[" C* array=(%!sparse_sequence(tail=("?")? ":" value=(top fall=(":" expr)?))?) C* cdelim="]" C*
  | C* odelim="<<" C* bytes=(item=(STR|NUM|CHAR|IDENT|"("top")"):SEQ_COMMENT,?) C* cdelim=">>" C*
  | C* odelim="(" tuple=(pairs=(extra | (((name tail="?") | rec="rec"? name | name?) ":" v=(top fall=(":" expr)?))):SEQ_COMMENT,?) cdelim=")" C*
};

.macro sparse_sequence(top) {
  first_item=(top) C* (SEQ_COMMENT:(item=(top|empty=\s*)),)?
}
