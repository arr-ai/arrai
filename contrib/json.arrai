# Helper functions for working with JSON data.

# Returns a "simplified" structure, replacing decoded tuples with their internal values.
# Intended for cases in which the types of null values is not interesting.
let rec simplify = \j
    cond j {
        [...]: j >> simplify(.),
        (:a): simplify(a),
        (:b): b,
        (:s): s,
        # May be used in some cases to encode arbitrarily-typed values.
        (:v): v,
        (): {},
        _: cond {
            # Base case: j is a number.
            # TODO: Replace with a more elegant check (j <: //number).
            j < {}: j,
            _: j >> simplify(.),
        },
    }
;

# Returns a copy of v with all dicts converted to tuples.
# This is essentially decoding JSON with a logical schema.
let rec tuplify = \v
    cond v {
        {x: ...}: //tuple(v >> tuplify(.)),
        [...]: v >> tuplify(.),
        {...}: v => tuplify(.),
        (...): v :> tuplify(.),
        _: v
    }
;

# Returns a copy of v restructured in the arr.ai encoding of JSON.
let rec toJson = \v
    cond v {
        # empty set => null
        {}: (),
        # Tuple => object
        (...): toJson(//dict(v)),
        # Array => array
        [...]: (a: v >> toJson(.)),
        # Dictionary => object
        {k: ...}: v => (@: $`${.@}`, @value: toJson(.@value)),
        # true => boolean
        true: (b: true),
        # Other sets are tricky:
        {...}:
            cond {
                # String
                (v => cond . {(:@, :@char): true}) = {true}: (s: v),
                # Other set => array
                _: toJson(v orderby .),
            }
        ,
        # Number => number
        _: v,
    }
;

# Returns a JSON string encoding of v.
let toJsonString = \v //seq.trim_suffix('\n', $`${//encoding.json.encode(toJson(v))}`);

# Returns a simplified, tuplified copy of json.
# json is the content of a JSON file (string or bytes).
let decodeSimple = \json tuplify(simplify(//encoding.json.decode(json)));

(
    :simplify,
    :tuplify,
    :decodeSimple,
    :toJson,
    :toJsonString,
)
