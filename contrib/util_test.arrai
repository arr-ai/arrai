let util = //{./util};

let _sum = \z \i z + i;

let _concat = \z \k \v $`${z}+${k}${v}`;

(
    reduce: (
        empty: util.reduce([], _sum, {}) = {},
        one: util.reduce([1], _sum, 0) = 1,
        many: util.reduce([1,2,3], _sum, 0) = 6,
    ),

    reduceFlat: (
        empty: util.reduceFlat([], _sum, {}) = {},
        one: util.reduceFlat([[1]], _sum, 0) = 1,
        many: util.reduceFlat([[1],[2],[3]], _sum, 0) = 6,
        pairs: util.reduceFlat([[1,2],[3,4]], _sum, 0) = 10,
    ),

    reduceObj: (
        empty: util.reduceObj({}, _concat, '') = '',
        one: util.reduceObj((a: 1), _concat, '') = '+a1',
        tuple: util.reduceObj((b: 1, a: 2), _concat, '') = '+a2+b1',
        dict: util.reduceObj({'b': 1, 'a': 2}, _concat, '') = '+a2+b1',
    ),

    invokeMacro:
        let time = (
            @grammar: {://grammar.lang.wbnf:date -> y=\d{4} "-" m=\d{2} "-" d=\d{2};:},
            @transform: (date: \ast ast -> (year: .y, month: .m, day: .d) :> //eval.value(.''))
        );
        let inline = {:time:2020-06-09:};
        util.invokeMacro(time, '2020-06-09') = inline = (day: 9, month: 6, year: 2020)
    ,

    naturalOrder:
        let input = {'a2','a10', 'a10a', 'a10b', 'a2a', 'a', '1', '12a', '12', '21', '21a1', '2', '', 'ab', 'a20b1c'};
        let ordered = ['', '1', '2', '12', '12a', '21', '21a1', 'a', 'a2', 'a2a', 'a10', 'a10a', 'a10b', 'a20b1c', 'ab'];
        (input orderby util.naturalOrder(.)) = ordered
    ,
)
