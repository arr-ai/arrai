\app
let grpc = //./grpc;
let wrap = "wrap" <: app.attrs.patterns;
let proto = //./'proto-util'(wrap);
let endpoints = app.endpoints where !//.str.has_prefix(.@item.name, "enum ");
//.archive.tar.tar({
    app.name + ".proto": $`
        //   THIS IS AUTOGENERATED BY sysl   //
        syntax = "proto3";

        package ${app.attrs.package};

        option go_package = "${app.attrs.package}";

        ${app.types >> $`
            message ${.key} {
                ${.fields >> proto.field(.)::\i}
            }`::\n\i:\n}
        ${//.rel.union(app.types >> proto.imports(.fields))::\i:\n}
        ${app.alias >> $`
            message ${.key} {
                string alias${.type} = 1;
            }`::}
        ${$`
            ${//.rel.union(endpoints >> (.params >> $`
                import "${//.str.sub(grpc.type(.), ".", "/")}.proto";`
                    if //.str.contains(grpc.type(.), "google.protobuf")
                => .@item
            ))::\i:\n}
            service ${app.name} {
                ${endpoints >> (proto.endpointInfo(.)).rpcMethod::\i}
            }
            ${//.log.print(app.endpoints &~ endpoints) >> $`
                enum ${//.rex.sub(.name, `^\S*\s`, "")} {
                    ${.stmts >> $`${.action};`::\i}
                }`:::\n}
            ${endpoints >> proto.wrapSequence(.).grpcType::\i}
            ${endpoints if wrap >>
                let retTokens = //.str.split(ep.ret("ok"), " ");
                let retName = //.str.sub(//.seq.concat(retTokens -- {"sequence", "of"}), ".", "");
                let attr = ep.attrs(retName + "_rpcId");
                let epi = proto.endpointInfo(ep);
                $`
                message ${epi.paramName} {
                    ${ep.params >>
                        let name = //.str.sub(.name, "-", "");
                        $`${grpc.type(.)} req${name} = ${.attrs(name + "_rpcId")};`
                    ::\i}
                }

                message ${epi.responseName} {
                    ${'repeated ' if retTokens count > 1}${retName} res${retName} = ${attr};
                }`:::\n}
        ` if app.endpoints}
    `,
})
