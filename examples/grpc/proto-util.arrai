let grpc = //{./grpc};

\wrap (
    field: \. $`${grpc.type(.)} ${//seq.sub("-", "", .key)} = ${.attrs.rpcId};`,

    imports: \fields
        fields where(//seq.contains("google.protobuf", grpc.type(.@item))) >>
            $`import "${//seq.sub(".", "/", grpc.type(.))}.proto";`,

    endpointInfo: \ep
        let method = //seq.sub("-", "", //str.title(//str.lower(ep.name)));
        let paramName = cond {
            wrap: method + "Request",
            _: $"${ep.params >> grpc.type(.)::, }",
        };
        let streamRes = cond {
            ep.attrs.stream: //seq.sub("sequence of", "stream", ep.ret("ok")),
            _: //seq.sub("sequence of ", "", ep.ret("ok")) + "s",
        };
        let responseName = cond {wrap: method + "Response", _: streamRes};
        (
            method:       method,
            paramName:    paramName,
            responseName: responseName,
            rpcMethod:    $`rpc ${method}(${paramName}) returns (${responseName}) {}`,
        ),

    wrapSequence: \ep
        let type = //seq.sub("sequence of ", "", ep.ret("ok"));
        let wrapType = type + "s";
        let name = //str.lower(type) + "s";
        (
            grpcType: cond {!ep.attrs.stream: $`message ${wrapType} { repeated ${type} ${name} = 1; }`},
        ),
)
