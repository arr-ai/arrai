let grpc = //{./grpc};

\wrap (
    field: \. $`${grpc.type(.)} ${//seq.sub(.key, "-", "")} = ${.attrs.rpcId};`,

    imports: \fields
        fields where(//seq.contains(grpc.type(.@item), "google.protobuf")) >>
            $`import "${//seq.sub(grpc.type(.), ".", "/")}.proto";`,

    endpointInfo: \ep
        let method = //seq.sub(//str.title(//str.lower(ep.name)), "-", "");
        let paramName = cond (
            wrap: method + "Request",
            *: $"${ep.params >> grpc.type(.)::, }",
        );
        let streamRes = cond (
            ep.attrs.stream: //seq.sub(ep.ret("ok"), "sequence of", "stream"),
            *: //seq.sub(ep.ret("ok"), "sequence of ", "") + "s",
        );
        let responseName = cond (wrap: method + "Response", *: streamRes);
        (
            method:       method,
            paramName:    paramName,
            responseName: responseName,
            rpcMethod:    $`rpc ${method}(${paramName}) returns (${responseName}) {}`,
        ),

    wrapSequence: \ep
        let type = //seq.sub(ep.ret("ok"), "sequence of ", "");
        let wrapType = type + "s";
        let name = //str.lower(type) + "s";
        (
            grpcType: cond (!ep.attrs.stream: $`message ${wrapType} { repeated ${type} ${name} = 1; }`),
        ),
)
